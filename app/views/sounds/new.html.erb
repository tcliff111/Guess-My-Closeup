<% if flash[:errors] && flash[:errors].count > 0 %>
	<h4>Warning error(s):</h4>
	<% flash[:errors].each do |error| %>
		<p><i>
		<%= error %>
		</i></p>
	<% end %>
<% end %>

<% if flash[:success] %>
	<h4>Image Created!</h4>
<% end %>





<!-- 
<style type='text/css'>
    ul { list-style: none; }
    #recordingslist audio { display: block; margin-bottom: 10px; }
 </style>


  <button onclick="startRecording(this);">Record</button>
  <button onclick="stopRecording(this);" disabled>Stop</button>
  
  <h2>Recordings</h2>
  <ul id="recordingslist"></ul> -->
  

<p class="instructions">Upload an image and write the name of the object and 3 plausible, but incorrect names.</p>

<br />


<%= form_for @sound, html: {multipart: true} do |f| %>
	<% #Put audio input here, I guess %>

	<%= f.label "Close-up" %>
	<%= f.file_field :image %>

	<br />
	<br />


	<% @sound.choices.each_with_index do |choice, count| %>
		<%= f.fields_for :choices, choice do |choice_form| %>
			<% if choice.correct? %>
				<%= choice_form.label "Correct Image Label" %>

			<% else %>
				<%= choice_form.label "Incorrect Image Label \##{count}" %>
			<% end %>
			&nbsp;&nbsp;&nbsp;	
			<%= choice_form.hidden_field :correct %>
			<%= choice_form.text_field :text %>
			<br />

		<% end %>
	<% end %>

	<br />

	<%= f.submit "Create Close-up" %>
<% end %>




<!-- <script>

  var audio_context;
  var recorder;
  function startUserMedia(stream) {
    var input = audio_context.createMediaStreamSource(stream);
   
    // Uncomment if you want the audio to feedback directly
    //input.connect(audio_context.destination);
    //__log('Input connected to audio context destination.');
    
    recorder = new Recorder(input);

  }
  function startRecording(button) {
    recorder && recorder.record();
    button.disabled = true;
    button.nextElementSibling.disabled = false;

  }
  function stopRecording(button) {
    recorder && recorder.stop();
    button.disabled = true;
    button.previousElementSibling.disabled = false;

    
    // create WAV download link using audio data blob
    createDownloadLink();
    recorder.clear();
  }

  function createDownloadLink() {
    recorder && recorder.exportWAV(function(blob) {
      var url = URL.createObjectURL(blob);
      var li = document.createElement('li');
      var au = document.createElement('audio');
      var hf = document.createElement('a');
      
      au.controls = true;
      au.src = url;
      hf.href = url;
      hf.download = new Date().toISOString() + '.wav';
      hf.innerHTML = hf.download;
      li.appendChild(au);
      li.appendChild(hf);
      recordingslist.appendChild(li);
    });
  }
  window.onload = function init() {
    try {
      // webkit shim
      window.AudioContext = window.AudioContext || window.webkitAudioContext;
      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia;
      window.URL = window.URL || window.webkitURL;
      
      audio_context = new AudioContext;

    } catch (e) {
      alert('No web audio support in this browser!');
    }
    
    navigator.getUserMedia({audio: true}, startUserMedia, function(e) {
      
    });
  };
  </script>

  <script src="/recorder.js"></script>
 -->

